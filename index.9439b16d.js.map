{"mappings":"AAMA,MAAMA,EAAiB,CACrBC,eAAgB,aAChBC,WAAY,GACZC,WAAY,KACZC,SAAU,YACVC,SAAU,YACVC,UAAU,GAST,SACMC,EAAUC,EAASC,GAC1BA,EAAUC,OAAOC,OAAO,GAAIX,EAAgBS,GAG5C,IAAIG,EAAW,CACbC,mBAAoB,GACpBC,oBAAqB,IAqBpB,SACMC,EAAQC,GACf,YACgCC,IAA9BD,EAAGE,QAAQC,gBACY,OAAvBV,EAAQN,WAqET,SACMiB,EAASJ,EAAIK,GACpB,MAAMC,EAzDL,SACeN,GAChB,YAAkCC,IAA9BD,EAAGE,QAAQC,eACNI,SAASP,EAAGE,QAAQC,gBAGF,OAAvBV,EAAQN,WACHoB,SAASd,EAAQN,iBAGQc,IAA9BD,EAAGE,QAAQM,eACND,SAASP,EAAGE,QAAQM,gBAGF,OAAvBf,EAAQP,WACHqB,SAASd,EAAQP,iBAD1B,EA2CqBuB,CAAST,GACxBU,EAAkBV,EAAGW,UACrBC,EAjCL,SACcC,EAAKC,EAAKC,GAAU,GAEnC,MAAMC,WCtEiBH,GACzB,OAAOA,EAAII,QAAO,kBAAoB,IDqEfC,CAAWL,GAEhC,OAAIE,EAEAC,EACGG,MAAM,IACNC,MAAM,EAAGN,EAAM,GACfO,KAAK,IAAM,MAKhBL,EACGG,MAAK,OACLC,MAAM,EAAGN,EAAM,GACfO,KAAK,KAAO,MAeOC,CAAQZ,EAAiBJ,EAAcP,EAAQC,IACjEuB,EAAuBxB,EAAQC,GACpBU,ECxHRc,gBAQgBX,GAC3B,MAAMY,WAkBmBZ,GACzB,OAAY,OAARA,GAAwB,KAARA,GAIbA,EAAII,QAAO,WAAa,IAvBjBS,CAAWb,GAAKM,MAAM,KACpC,OAAOM,EAAME,QAAQC,GAAyB,KAAhBA,EAAKC,SAAeL,OD+G5CM,CAAapB,GAMjB,GAJAd,EAASC,mBAAmBkC,KAAKrB,GACjCd,EAASE,oBAAoBiC,KAAKnB,GAG9BN,EAAeiB,EAAsB,CACvCvB,EAAGW,UAAYf,EAASE,oBAAoBO,GAU7C,SACiBA,GAClB,MAAM2B,EAAWC,SAASC,cAAc,QACxCF,EAASG,UAAS,GAAM1C,EAAQR,4BAChC+C,EAASrB,UAUR,SACeN,GAChB,MAAM,kBACKZ,EAAQR,kBAAkBoB,sBACxBZ,EAAQR,qEAEbQ,EAAQL,6BAhBKgD,CAAS/B,GAE9Bb,EAAQa,GAAKgC,MAAML,GAuBlB,SACsB3B,GACV4B,SAASK,cAAa,IAAK7C,EAAQR,kBAAkBoB,KAE7DkC,iBAAiB,SAAUC,IAC9BhD,EAAQa,GAAKoC,UAAUC,OAAO,eAC9B,MAAMC,EAASH,EAAEI,cACc,SAA3BD,EAAOzC,QAAQ2C,SACjBrD,EAAQa,GAAKM,UAAYf,EAASC,mBAAmBQ,GACrDsC,EAAOhC,UAAYlB,EAAQJ,SAC3BsD,EAAOzC,QAAQ2C,SAAU,IAEzBrD,EAAQa,GAAKM,UAAYf,EAASE,oBAAoBO,GACtDsC,EAAOhC,UAAYlB,EAAQL,SAC3BuD,EAAOzC,QAAQ2C,SAAU,MApC7BC,CAAgBzC,GAfd0C,CADW1C,IA8Df,MAAO,CACL2C,KArKC,WAED,IAAK,IAAIC,EAAI,EAAGC,EAAI1D,EAAQgC,OAAQyB,EAAIC,IAAKD,EAC3C7C,EAASZ,EAAQyD,GAAIA,GA4JJjD,EA3JLR,EAAQyD,GA4JtBE,QAAQC,IAAI,eAAgBpD,OADTA,IAUvBT,EAAUE,QAAUT,EAELO,EE5MG0C,SAASoB,iBAAiB,mBAIxCL","sources":["src/read-smore.js","src/utils/index.js","demo/src/app.js"],"sourcesContent":["import { getWordCount, getCharCount, trimSpaces } from './utils'\n;('use strict')\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 30,\n  charsCount: null,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false\n}\n\n/**\n * ReadSmore\n * @author @stephenscaff\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: []\n  }\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i)\n      checkInline(element[i])\n    }\n  }\n\n  /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */\n  function isChars(el) {\n    if (\n      el.dataset.readSmoreChars !== undefined ||\n      options.charsCount !== null\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */\n  function getCount(el) {\n    if (el.dataset.readSmoreChars !== undefined) {\n      return parseInt(el.dataset.readSmoreChars)\n    }\n\n    if (options.charsCount !== null) {\n      return parseInt(options.charsCount)\n    }\n\n    if (el.dataset.readSmoreWords !== undefined) {\n      return parseInt(el.dataset.readSmoreWords)\n    }\n\n    if (options.wordsCount !== null) {\n      return parseInt(options.wordsCount)\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str)\n\n    if (isChars) {\n      return (\n        trimedSpaces\n          .split('')\n          .slice(0, max - 1)\n          .join('') + '...'\n      )\n    }\n\n    return (\n      trimedSpaces\n        .split(/\\s+/)\n        .slice(0, max - 1)\n        .join(' ') + '...'\n    )\n  }\n\n  /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    const definedCount = getCount(el)\n    const originalContent = el.innerHTML\n    const truncateContent = ellipse(originalContent, definedCount, isChars(el))\n    const originalContentCount = isChars(el)\n      ? getCharCount(originalContent)\n      : getWordCount(originalContent)\n\n    settings.originalContentArr.push(originalContent)\n    settings.truncatedContentArr.push(truncateContent)\n\n    // bail if total count is less that original content count\n    if (definedCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx]\n      let self = idx\n      createLink(self)\n    }\n  }\n\n  /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const linkWrap = document.createElement('span')\n    linkWrap.className = `${options.blockClassName}__link-wrap`\n    linkWrap.innerHTML = linkTmpl(idx)\n    // insert link\n    element[idx].after(linkWrap)\n    handleLinkClick(idx)\n  }\n\n  /**\n   * Read More Link Template\n   * @param {Number} idx\n   * @returns {String} - html string\n   */\n  function linkTmpl(idx) {\n    return `\n      <a id=\"${options.blockClassName}_${idx}\"\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\">\n          ${options.moreText}\n      </a>\n    `\n  }\n\n  /**\n   * More/Less Link click handler\n   * @private\n   * @param {Number} index - index of clicked link\n   */\n  function handleLinkClick(idx) {\n    const link = document.querySelector(`#${options.blockClassName}_${idx}`)\n\n    link.addEventListener('click', (e) => {\n      element[idx].classList.toggle('is-expanded')\n      const target = e.currentTarget\n      if (target.dataset.clicked !== 'true') {\n        element[idx].innerHTML = settings.originalContentArr[idx]\n        target.innerHTML = options.lessText\n        target.dataset.clicked = true\n      } else {\n        element[idx].innerHTML = settings.truncatedContentArr[idx]\n        target.innerHTML = options.moreText\n        target.dataset.clicked = false\n      }\n    })\n  }\n\n  function checkInline(el) {\n    console.log('check inline', el)\n  }\n\n  // API\n  return {\n    init: init\n  }\n}\n\nReadSmore.options = defaultOptions\n\nexport default ReadSmore\n","'use strict'\n\n/**\n * Get Character Count\n * @param {string\n * @param {number}\n */\nexport function getCharCount(str) {\n  return str.length\n}\n\n/**\n * Get Word Count\n * @param {string}\n * @param {number}\n */\nexport function getWordCount(str) {\n  const words = removeTags(str).split(' ')\n  return words.filter((word) => word.trim() !== '').length\n}\n\n/**\n * Trim whitespace\n * @param {string}\n * @param {string}\n */\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '')\n}\n\n/**\n * Remove HTML Tags from string\n * @param {string}\n * @param {string}\n */\nexport function removeTags(str) {\n  if (str === null || str === '') {\n    return false\n  }\n\n  return str.replace(/<[^>]+>/g, '')\n}\n","import ReadSmore from '../../src'\n\nconst readMores = document.querySelectorAll('.js-read-smore')\n// eslint-disable-next-line new-cap\nconst RMs = ReadSmore(readMores)\n\nRMs.init()\n"],"names":["$db984b8bf9974eec$var$defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","$db984b8bf9974eec$var$ReadSmore","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","isChars1","el","undefined","dataset","readSmoreChars","truncate","idx","definedCount","parseInt","readSmoreWords","getCount","originalContent","innerHTML","truncateContent","str","max","isChars","trimedSpaces","replace","$1eef38cfda4b0c52$export$21f453ae16e69339","split","slice","join","ellipse","originalContentCount","length","words","$1eef38cfda4b0c52$export$7d68961ff6256c01","filter","word","trim","$1eef38cfda4b0c52$export$dba3e2bcdbd49da4","push","linkWrap","document","createElement","className","linkTmpl","after","querySelector","addEventListener","e","classList","toggle","target","currentTarget","clicked","handleLinkClick","createLink","init","i","n","console","log","querySelectorAll"],"version":3,"file":"index.9439b16d.js.map"}