{"version":3,"file":"index.umd.js","sources":["../src/read-smore.js","../src/utils/index.js"],"sourcesContent":["import { getWordCount, getCharCount, trimSpaces } from './utils'\n;('use strict')\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 30,\n  charsCount: null,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false\n}\n\n/**\n * ReadSmore\n * @author @stephenscaff\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: []\n  }\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i)\n    }\n  }\n\n  /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */\n  function isChars(el) {\n    if (\n      el.dataset.readSmoreChars !== undefined ||\n      options.charsCount !== null\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */\n  function getCount(el) {\n    if (el.dataset.readSmoreChars !== undefined) {\n      return parseInt(el.dataset.readSmoreChars)\n    }\n\n    if (options.charsCount !== null) {\n      return parseInt(options.charsCount)\n    }\n\n    if (el.dataset.readSmoreWords !== undefined) {\n      return parseInt(el.dataset.readSmoreWords)\n    }\n\n    if (options.wordsCount !== null) {\n      return parseInt(options.wordsCount)\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str)\n\n    if (isChars) {\n      return (\n        trimedSpaces\n          .split('')\n          .slice(0, max - 1)\n          .join('') + '...'\n      )\n    }\n\n    return (\n      trimedSpaces\n        .split(/\\s+/)\n        .slice(0, max - 1)\n        .join(' ') + '...'\n    )\n  }\n\n  /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    const definedCount = getCount(el)\n    const originalContent = el.innerHTML\n    const truncateContent = ellipse(originalContent, definedCount, isChars(el))\n    const originalContentCount = isChars(el)\n      ? getCharCount(originalContent)\n      : getWordCount(originalContent)\n\n    settings.originalContentArr.push(originalContent)\n    settings.truncatedContentArr.push(truncateContent)\n\n    // bail if total count is less that original content count\n    if (definedCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx]\n      let self = idx\n      createLink(self)\n    }\n  }\n\n  /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const linkWrap = document.createElement('span')\n    linkWrap.className = `${options.blockClassName}__link-wrap`\n    linkWrap.innerHTML = linkTmpl(idx)\n    // insert link\n    element[idx].after(linkWrap)\n    handleLinkClick(idx)\n  }\n\n  /**\n   * Read More Link Template\n   * @param {Number} idx\n   * @returns {String} - html string\n   */\n  function linkTmpl(idx) {\n    return `\n      <a id=\"${options.blockClassName}_${idx}\"\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\">\n          ${options.moreText}\n      </a>\n    `\n  }\n\n  /**\n   * More/Less Link click handler\n   * @private\n   * @param {Number} index - index of clicked link\n   */\n  function handleLinkClick(idx) {\n    const link = document.querySelector(`#${options.blockClassName}_${idx}`)\n\n    link.addEventListener('click', (e) => {\n      element[idx].classList.toggle('is-expanded')\n      const target = e.currentTarget\n      if (target.dataset.clicked !== 'true') {\n        element[idx].innerHTML = settings.originalContentArr[idx]\n        target.innerHTML = options.lessText\n        target.dataset.clicked = true\n      } else {\n        element[idx].innerHTML = settings.truncatedContentArr[idx]\n        target.innerHTML = options.moreText\n        target.dataset.clicked = false\n      }\n    })\n  }\n\n  // API\n  return {\n    init: init\n  }\n}\n\nReadSmore.options = defaultOptions\n\nexport default ReadSmore\n","'use strict'\n\n/**\n * Get Character Count\n * @param {string\n * @param {number}\n */\nexport function getCharCount(str) {\n  return str.length\n}\n\n/**\n * Get Word Count\n * @param {string}\n * @param {number}\n */\nexport function getWordCount(str) {\n  const words = removeTags(str).split(' ')\n  return words.filter((word) => word.trim() !== '').length\n}\n\n/**\n * Trim whitespace\n * @param {string}\n * @param {string}\n */\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '')\n}\n\n/**\n * Remove HTML Tags from string\n * @param {string}\n * @param {string}\n */\nexport function removeTags(str) {\n  if (str === null || str === '') {\n    return false\n  }\n\n  return str.replace(/<[^>]+>/g, '')\n}\n"],"names":["defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","ReadSmore","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","isChars","el","undefined","dataset","readSmoreChars","init","i","n","length","idx","definedCount","originalContent","truncateContent","originalContentCount","parseInt","readSmoreWords","getCount","str","max","trimedSpaces","trimSpaces","replace","split","slice","join","ellipse","innerHTML","filter","word","trim","push","linkWrap","document","createElement","className","linkTmpl","after","querySelector","addEventListener","e","classList","toggle","target","currentTarget","clicked","handleLinkClick","createLink","removeTags"],"mappings":"4NAMA,IAAMA,EAAiB,CACrBC,eAAgB,aAChBC,WAAY,GACZC,WAAY,KACZC,SAAU,YACVC,SAAU,YACVC,UAAU,GAUZ,SAASC,EAAUC,EAASC,GAC1BA,EAAUC,OAAOC,OAAO,GAAIX,EAAgBS,GAG5C,IAAIG,EAAW,CACbC,mBAAoB,GACpBC,oBAAqB,IAqBvB,SAASC,EAAQC,GACf,YACgCC,IAA9BD,EAAGE,QAAQC,gBACY,OAAvBV,EAAQN,WA8IZ,MAAO,CACLiB,KA/JF,WACE,IAAK,IAAIC,EAAI,EAAGC,EAAId,EAAQe,OAAQF,EAAIC,IAAKD,EAqFzBG,EApFGH,OAqFjBI,OACAC,OACAC,OACAC,EAHAH,EAxDR,SAAkBT,GAChB,YAAkCC,IAA9BD,EAAGE,QAAQC,eACNU,SAASb,EAAGE,QAAQC,gBAGF,OAAvBV,EAAQN,WACH0B,SAASpB,EAAQN,iBAGQc,IAA9BD,EAAGE,QAAQY,eACND,SAASb,EAAGE,QAAQY,gBAGF,OAAvBrB,EAAQP,WACH2B,SAASpB,EAAQP,iBAD1B,EA2CqB6B,CADLf,EApFLR,EAAQa,IAuFbM,EAhCR,SAAiBK,EAAKC,EAAKlB,QAAAA,IAAAA,IAAAA,GAAU,GAEnC,IAAMmB,ECrEMC,SAAWH,GACzB,OAAOA,EAAII,QAAQ,kBAAmB,IDoEfD,CAAWH,GAEhC,OAAIjB,EAEAmB,EACGG,MAAM,IACNC,MAAM,EAAGL,EAAM,GACfM,KAAK,IAAM,MAKhBL,EACGG,MAAM,OACNC,MAAM,EAAGL,EAAM,GACfM,KAAK,KAAO,MAeOC,CADlBd,EAAkBV,EAAGyB,UACsBhB,EAAcV,EAAQC,IACjEY,EAAuBb,EAAQC,GACpBU,ECvHRH,QA2BcS,ED6FNN,EC5FP,OAARM,GAAwB,KAARA,GAIbA,EAAII,QAAQ,WAAY,KAvBDC,MAAM,KACvBK,OAAO,SAACC,GAAD,MAA0B,KAAhBA,EAAKC,SAAerB,ODgHhDX,EAASC,mBAAmBgC,KAAKnB,GACjCd,EAASE,oBAAoB+B,KAAKlB,GAG9BF,EAAeG,IACjBZ,EAAGyB,UAAY7B,EAASE,oBAAoBU,GAWhD,SAAoBA,GAClB,IAAMsB,EAAWC,SAASC,cAAc,QACxCF,EAASG,UAAexC,EAAQR,eAAhC,cACA6C,EAASL,UAWX,SAAkBjB,GAChB,wBACWf,EAAQR,eADnB,IACqCuB,EADrC,qBAEaf,EAAQR,eAEbQ,uDAAAA,EAAQL,8BAhBK8C,CAAS1B,GAE9BhB,EAAQgB,GAAK2B,MAAML,GAwBrB,SAAyBtB,GACVuB,SAASK,cAAkB3C,IAAAA,EAAQR,mBAAkBuB,GAE7D6B,iBAAiB,QAAS,SAACC,GAC9B9C,EAAQgB,GAAK+B,UAAUC,OAAO,eAC9B,IAAMC,EAASH,EAAEI,cACc,SAA3BD,EAAOvC,QAAQyC,SACjBnD,EAAQgB,GAAKiB,UAAY7B,EAASC,mBAAmBW,GACrDiC,EAAOhB,UAAYhC,EAAQJ,SAC3BoD,EAAOvC,QAAQyC,SAAU,IAEzBnD,EAAQgB,GAAKiB,UAAY7B,EAASE,oBAAoBU,GACtDiC,EAAOhB,UAAYhC,EAAQL,SAC3BqD,EAAOvC,QAAQyC,SAAU,KApC7BC,CAAgBpC,GAfdqC,CADWrC,ICrGDsC,IAAW9B,EDuFPhB,EAAIQ,EACdC,EACAC,EACAC,EACAC,WAyEVrB,EAAUE,QAAUT"}